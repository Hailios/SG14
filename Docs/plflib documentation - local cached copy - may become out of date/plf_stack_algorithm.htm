<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="description" content="PLF C++ Library">
  <meta name="keywords"
  content="C++, C, PLF, colony, stack, STL, containers, optimize, performance, pointer, iterator, boolean, field">
  <title>PLF C++ Library - plf::stack</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a>

<h1>plf::stack - a better, more efficient stack alternative</h1>
<p>By Matthew Bentley 15/02/2016</p>

<h2>Abstract</h2>

<p>This document describes the plf::stack template-based C++ data container, and it's advantages over both std::stack and std::vector.</p>


<h2>Introduction</h2>

<p>There are many scenarios in which a simple stack (last object in is first object out) trumps more sophisticated data container models in terms of simplicity of interface and ability to limit the scope of usage. However, std::stack is a container interface with the underlying container model being decided upon by the compiler in question. In the majority of cases a deque is chosen as the underlying data container for std::stack, and performance suffers as a result, as std::deque is not tremendously cache-friendly (under most implementations). The alternative is to use std::vector and it's push_back() and pop_back() functions as a way to facilitate a stack, however this is not as fast as it could be due to the performance cost incurred by memory reallocation upon insertion (once the original memory block is full). Furthermore, a std::vector-based stack invalidates pointers to stack elements every time it reallocates, making it unsuitable for highly modular code with interelationships between data within containers. Games programming falls into this latter category. Lastly, neither std::stack nor std:vector allow for the reclamation of unused memory after a large amount of container "pop"'s without invalidating pointers yet again.</p>

<p>plf::stack solves all three of these issues: it is faster than std::deque, std::vector and any of the tested compiler implementations of std::stack, it never invalidates pointers to stack objects which have not been "pop"'d, and it facilitates the reclamation of unused memory, once again without invalidating pointers. It does this by implementing a size-doubling memory block model of allocation, and by providing a shrink_to_fit() function which deallocates unused memory-blocks. The next few sections will detail the 2x memory-block expansion pattern, then how plf::stack uses this pattern in it's own implementation.</p>

<h2>The size-doubling memory block model</h2>

<h3>Explanation</h3>

<p>This is a simple technique for allocating memory in a situation where the amount of memory needed is not known in advance, for example, for a dynamically-expanding data container such as a dynamic array or C++ vector.</p>

<p>To start with, you allocate a small block of memory of fixed size. As an example, let's hypothesize a C++ vector of 32-bit integers, using this memory pattern. We initialize the vector, and it creates a memory block large enough to hold 8 integers as it's initial memory block:</p>

<code>Memory block 1: 0 0 0 0 0 0 0 0</code>


<p>Once that block is full (ie. the container has had enough objects inserted into it to fill up the available space), we allocate another memory block large enough to double the number of objects that can be held within the container. Continuing the vector example above, let's say we've now filled the initial 8 spaces available:</p>

<code>Memory block 1: 1 5 6 2 7 1 5 2</code>


<p>and now wish to add another number to the vector. At this point we must double the space available, which means we need to adding another memory block large enough to hold 8 integers:</p>

<code>Memory block 1: 1 5 6 2 7 1 5 2<br>
Memory block 2: 0 0 0 0 0 0 0 0</code>


<p>and insert into it:</p>

<code>Memory block 1: 1 5 6 2 7 1 0 2<br>
Memory block 2: 4 0 0 0 0 0 0 0</code>


<p>Now we simply continue this pattern every time we run out of space. Continuing the vector example above, the next allocated memory block would be large enough to hold 16 integers:</p>

<code>Memory block 1: 1 5 6 2 7 1 5 2<br>
Memory block 2: 4 3 1 3 4 1 6 4<br>
Memory block 3: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</code>


<p>and the next memory block after that would be large enough to hold 32 integers, etcetera.</p>

<h3>Implicit advantages</h3>

<p>The most significant advantage of this technique over the method of reallocating all elements to a larger memory block (as is favoured by std::vector and many others) is the stability of pointers/iterators, which is unaffected by element insertion. No matter how many elements get added to a container using this pattern, adding elements never triggers pointer/iterator invalidation - which is highly significant for both modular and object-oriented programming architectures, as it decreases busywork and workarounds for invalidations, and thus decreases development time.<p>

<p>In addition, adding elements to a container using this pattern is typically twice as fast as adding to a container using a reallocation method (in real-world benchmarks) due to the fact that no data needs to be reallocated upon expansion. Freeing up unused memory also becomes a possibility when memory blocks become empty due to erasures, by removing the block and joining the previous block and subsequent block to each other instead (or in the case of a stack, removing trailing blocks). The blocks must be, of course, doubly-linked, to ensure that both forward and reverse iteration remain possible.</p>

<p>In terms of iteration over all container elements, an entirely-contiguous single memory block will, of course, result in a lower iteration duration, but the difference tends to be minimal given a decent implementation. A check for end-of-block is required for each +1 forward-iteration through a data using this expansion model, just as a check for beginning-of-block is required for each -1 reverse-iteration through. This proves to be minimally-detrimental though, in real-world benchmarking, as cache-misses only occur in the least-common case of end-block/beginning-block.</p>

<p>In comparison to a similar pattern using multiple fixed-and-equal memory block sizes, the 2x expansion improves both iteration and insertion performance, as there are overall fewer instances of memory allocation during insertion, and there are greater expanses of contiguous elements during iteration.</p>

<p>There's also an advantage to using this pattern in terms of recovering unused memory - with a single-block model, when there are large portions of the singular memory block not being used, reclaiming that memory for the OS is not possible without first reallocating all data. With a 2x block expansion pattern, any empty block can be freed to the OS without reallocation of data. In practice this could lead to having large memory blocks with only a few objects within them, which cannot be reclaimed, but within the context of a stack this is not a significant concern.</p>



<h2>plf::stack implementation</h2>

<p>plf::stack uses the above size-doubling memory block expansion model with objects called 'groups' which are individually comprised of a memory block and some metadata about that block and the group itself (namely, a pointer to any previous group, a pointer to any subsequent group, and a pointer to the memory address of the last element in the memory block). The groups are doubly-linked, and could be iterated over if an iterator were to be implemented (I chose to strictly mimic the std::stack's functionality and avoid implementation of iterators).</p>

<p>The stack object itself has pointers to the first group allocated, the current group (ie. the group where the next push()'d object will be inserted), the memory location of the last insertion, the memory location of the start of the current group's memory block. In addition it has unsigned integers describing the total number of objects currently in the stack, and the maximum possible size of any new group (this last variable is determined by the allocator used).</p>

<p>In addition to the usual stack functions as proscribed by std::stack (push, pop, top, clear, empty, size, the assignment and equality operators), plf::stack also includes shrink_to_fit() and remove_unused_blocks() functions. Like std::vector, plf::stack doesn't free up memory as it removes elements, as this creates an unnecessary performance regression in the pop() function. remove_unused_blocks() is the workaround for the scenario where many pop()'s have occured, resulting in trailing unused groups. It has very little performance cost and is non-destructive: it merely removes any additional groups occuring after the current group, meaning none of the un-popped elements in the stack have pointers to them invalidated.</p>

<p>shrink_to_fit() is destructive, permanently invalidating any and all pointers to elements within the stack. It should only be used when a stack is as large as it is ever going to be, and there is a concern that it may be using much more memory than it needs to. In this case a new singular group is created with a memory block large enough to house all current elements in the stack. It then copies all elements to the new memory block, and removes all old memory blocks. It is equivalent to using the assignment operator between two plf::stack's.</p>



<h2>Performance results</h2>

<p>The benchmarks compared performance between std::vector, std::stack and plf::stack across four compilers: mingw TDM GCC 5.1 x86 and x64, MS VC++2010 and MS VC++2013. Clang was forgone as the results were similar to GCC. Test setup was an E8500 CPU on an Intel motherboard, 8GB ram, running a stripped-back build of Windows 7 with most services disabled. Compilation settings for MS compilers were standard release settings, GCC settings were -O2;-march=native;-std=c++11.</p>

<p>There are three tests, each testing push and pop times: one with a simple small struct consisting of 2
doubles, 2 pointers and 2 integers, one with a larger struct containing several
large arrays, and one with only unsigned ints ie. a primitive type. We'll start
with the small structs. Numbers are in milliseconds, lower is better.</p>


<h4>Small struct test</h4>

<table style="width: 100%" border="1">
  <caption>Push 5000000 small structs, each with a random number in an unsigned
  int member</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>332</td>
      <td>312</td>
      <td>434</td>
      <td>497</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>149</td>
      <td>117</td>
      <td>153</td>
      <td>140</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>2.3x</td>
      <td>2.7x</td>
      <td>2.8x</td>
      <td>3.6x</td>
      <td>2.9x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + Pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>45</td>
      <td>39</td>
      <td>30</td>
      <td>43</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>48</td>
      <td>36</td>
      <td>30</td>
      <td>46</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>0.94x</td>
      <td>1.08x</td>
      <td>1.0x</td>
      <td>0.94x</td>
      <td>0.99x</td>
    </tr>
  </tbody>
</table>

<p></p>

<p></p>

<h4>Large struct test</h4>

<table style="width: 100%" border="1">
  <caption>Push 10000 large structs, each with a random number in an unsigned
  int member</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>311</td>
      <td>269</td>
      <td>444</td>
      <td>465</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>96</td>
      <td>103</td>
      <td>100</td>
      <td>104</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>3.2x</td>
      <td>2.6x</td>
      <td>4.5x</td>
      <td>4.5x</td>
      <td>3.8x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>35</td>
      <td>34</td>
      <td>34</td>
      <td>37</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>34</td>
      <td>33</td>
      <td>33</td>
      <td>36</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
    </tr>
  </tbody>
</table>

<p></p>

<h4>Small primitive type test</h4>

<table style="width: 100%" border="1">
  <caption>Push 10000000 random unsigned ints</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>179</td>
      <td>177</td>
      <td>286</td>
      <td>229</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>138</td>
      <td>117</td>
      <td>220</td>
      <td>161</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.3x</td>
      <td>1.5x</td>
      <td>1.3x</td>
      <td>1.4x</td>
      <td>1.4x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>24</td>
      <td>9</td>
      <td>17</td>
      <td>29</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>24</td>
      <td>13</td>
      <td>17</td>
      <td>37</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.00x</td>
      <td>0.69x</td>
      <td>1.00x</td>
      <td>0.78x</td>
      <td>0.87x</td>
    </tr>
  </tbody>
</table>


<h2>Summary</h2>
<p>As you can see, plf::stack provides much better aggregate performance than std::vector and std::stack across all compilers, making up for it's (sometimes) weaker pop() performance on small scalar types with a much greater gain in performance with it's push() speed in that same area. In addition it allows for the easy reclamation of unused memory space, either with or without pointer invalidation (at the user's descretion). plf::stack is open-source, free and under a permissive zlib license. It can be downloaded from plflib.org along with plf::colony.</p>


<p>Contact: <img src="footer.gif"><br>
plf:: library and this site Copyright (c) 2016, Matthew Bentley</p>

</body>
</html>