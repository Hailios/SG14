<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="description" content="PLF C++ Library">
  <meta name="keywords"
  content="C++, C, vector, PLF, colony, stack, STL, containers, optimize, performance, pointer, iterator, invalidation">
  <title>PLF C++ Library</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<h1>PLF C++ Library</h1>

<p>PLF is a collection of library modules for C++. Please click on the links below to
learn more about the different modules and to download. All
modules (except timsort) are under a permissive <a href="http://en.wikipedia.org/wiki/Zlib_License">Zlib
license</a> and support C++03/C++11/C++14. Tested compilers include
Clang 3.61-3.71, GCC 4.6-5.1 (32-bit and 64-bit), MS Visual C++ 2010-2015.</p>
<br>
<br>


<p><a href="colony.htm"><strong>plf::colony</strong></a> - An unordered data
container providing fast iteration/insertion/erasure while maintaining pointer/iterator
validity to non-erased elements.</p>

<p><a href="stack.htm"><strong>plf::stack</strong></a> - A data container replicating std::stack functionality but
with better performance than standard library containers in a stack context.</p>

<p><a href="nanotimer.htm"><strong>plf::nanotimer</strong></a> - A cross-platform lowest-overhead microsecond-precision timer for simple benchmarking on Linux/BSD/Windows/Mac.</p>

<p><a href="timsort.htm"><strong>plf::timsort</strong></a> - A fork of GFX's <a href="https://github.com/gfx/cpp-TimSort">timsort</a> function - will be used internally by colony (instead of std::sort) if included in the project prior to colony.</p>

<p><a
href="http://em.rdcu.be/wf/click?upn=KP7O1RED-2BlD0F9LDqGVeSPyQHezub7M4gGFa4NTPPTU-3D_ih77hK-2FwXUNPXOClzbShNQsKzXRuUomlRdQ1DjaMsrpnUBwwtbFTp5VEo6fdTXEOm5aVQpvVZ28aaMucmOmTG7j6bqKdutLSZ5s-2FvVOpi0U-2BRUm-2BokLgfiyljrkOnlzzohhddyytFQ6xbOHnaSP-2BiryryBzyk0-2FcqHJHqWla0UjauVoYm2aWi5no-2F91Tum6XKjVqwSLtk3SZQBA-2BuYbfglhC7NGb-2F0qoV47pMMnoV-2Fo-3D"><strong>Advanced jump-counting skipfield pattern</strong></a> - A skipfield pattern which avoids branching during iteration. Used by colony.</p>
<br>
<br>


<h3>Cppcon 2016</h3>

<p>The following talk entitled <a href="https://www.youtube.com/watch?v=wBER1R8YyGY">"Colonies, performance and why you should care"</a> was presented at CPPcon 2016:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wBER1R8YyGY" frameborder="0"></iframe>
<p>The slides for the talk are available <a href="http://www.mediafire.com/download/xf8zk9c16efsp66/Colonies%2C+performance+and+why+you+should+Care+-+cppcon+2016.pdf">here</a>.
</p>

<p><a id="contact"></a>Contact: <img alt="footer" src="footer.gif"><br>
plf:: library and this page Copyright (c) 2017, Matthew Bentley</p>
</body>
</html>
