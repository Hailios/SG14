<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">
  <meta name="description" content="PLF C++ Library - plf::stack">
  <meta name="keywords"
  content="C++, C, vector, stack, plf::colony, skipfield, jump-counting, containers, optimize, performance, pointer, iterator, invalidation, benchmarks, results, benchmark">
  <title>PLF C++ Library - plf::colony - skipfield comparison results</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a> 

<h1>PLF C++ Library - plf::colony - skipfield comparison results</h1>
<p style="font-size: 75%"><i>Last updated 28-04-2016 v3.04</i></p>

<p>Below we benchmark in C++ the results for a colony container using a boolean field to indicate erasure, versus a colony container using a jump-counting skipfield to indicate erasure, and as a reference point, a std::vector. The std::vector will have slow erasure and insertion speed due to it's need to reallocate subsequent elements to ensure element contiguity, but fast iteration speed due to it's entirely contiguous element storage, which gives performance similar to a regular array. Both colony types will have fast insertion and erasure times but corresponding slower iteration times.</p>

<p>We will ignore insertion benchmarks as the performance differences are not substantial between the boolean colony and the jump-counting colony, and focus on iteration and erasure results. In the erasure tests we are iterating through the container elements and erasing at random, rather than utilizing a C++ "remove_if" erasure pattern, as might be more common or useful if we were solely processing the std::vector, but which makes no difference for colony erasure performance. Here are the iteration results prior to any erasures:</p>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/iteration_0.png">

<p>From this we can see that the std::vector comes in first, with the jump-counting colony second and the boolean colony close behind. At this stage the difference in speed between the last two is likely down to the need for branching in the boolean iteration compared to the simple addition necessary for the jump-counting iteration. Now we will measure erase performance when iterating over the containers and erasing 25% of all elements at random:</p>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_25.png">

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_25_log.png">

<p>std::vector has predictably poor erasure performance due to it's need to reallocate all subsequent elements after the erased element, in order to achieve element contiguousness for iteration speed, and due to the random erasure pattern. Both colony containers perform equally well due to their lack of reallocation, requiring a fraction of std::vector's time. Now let's see how the performance of iteration over the elements has altered:</p>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/iteration_25.png">


<p>Immediately we see a performance advantage for the jump-counting colony over the boolean colony. The jump-counting colony's performance increases due to the fewer number of elements to read, but the boolean colony's performance almost halves. There are two reasons for this; firstly, the boolean colony must check the value of each skipfield node to determine the erased status of the corresponding element, and hence has no ability in the case of a run of erased elements to simply skip from one non-erased element to the next non-erased element. The jump-counting colony has this ability, and so iteration speed is greatly increased in this way.</p>

<p>Secondly, in the first iteration test there were no erased elements and hence while the boolean colony had branching code (to enable skipping of an individual element when it's corresponding skipfield node indicated it was erased), the CPU's branch prediction could lower the performance cost of the branching code minimizing cache misses, as there was only one path for the branch to take at this point, due to lack of erasures. But with 25% of all elements erased, the iterator will detect a skipped element 25% of the time, the default branching that the CPU will predict is therefore wrong 25% of the time, which dramatically increases the cost of the branching code. We will now show this effect further by erasing 50% of all elements in the original containers at random:</p>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_50.png">

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_50_log.png"><br>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/iteration_50.png">


<p>Here the boolean colony's iteration performance is worse than the 25% erasure performance, because for 50% randomized erasures there is no chance for the CPU's branch prediction to be correct any more than 50% of the time. The jump-counting colony's iteration performance continues to scale proportionally to the number of erasures, as does the std::vector's. Now we erase 75% of all elements in the original containers:</p>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_75.png">

<img alt="test result graph" src="tests/gcc/colony/jump_counting/erase_75_log.png"><Br>

<img alt="test result graph" src="tests/gcc/colony/jump_counting/iteration_75.png">

<p>Both the jump-counting colony and the std::vector continue to scale proportionally to the number of erasures. The boolean colony in this case performs slightly better than in the 25% erasure iteration test, the likely reason being that at this point the CPU branch prediction can work at least as adequately as it did with the 25% erasure iteration, but unlike that benchmark, in the case iterating when 75% of all elements have been erased, only 25% of the original elements are having their values read, as opposed to the 75% of all original elements having their values read, in the 25% erasure iteration test.</p>

<p>Overall we can see that not only the lack of branch code but also the lack of reliance on CPU branch prediction plays a large role in the performance of a jump-counting pattern, over a simple boolean pattern. On a CPU without branch prediction, we can expect the boolean pattern to perform worse in the majority of cases, with the performance being closer to the 50% erasure iteration test. The rest of the performance loss is made up of the number of reads necessary for the boolean skipfield, versus a jump-counting skipfield.</p>

<p>Lastly we'll perform a slightly different test, simply to compare the performance of a std::deque - the one container under GCC which has performance characteristics that are contendors to colony in the same contexts - with boolean and jump-counting colonys, but using the same boolean skipfield for the std::deque. This should show the performance benefit of a colony's structure asides from the jump-counting pattern. Below is shown relative iterative performance of plf::colony using a boolean field instead of a jump-counting skipfield, vs a regular jump-counting plf::colony, a deque_bool (deque with a bool indicating erasure as part of the stored small struct type) and a booled_deque (a deque using a boolean field separate to the stored data to indicate erasure). The measurement is taken after randomly erasing 75% of all of the original elements in the containers:</p>

<img alt="test result graph" src="tests/gcc/colony/comparitive/skipfield_approach_iterative_comparison.png"><br><br>
<img alt="test result graph" src="tests/gcc/colony/comparitive/skipfield_approach_iterative_comparison_log.png">

<p>From this we can see that a colony's internal structure is superior to a std::deque in terms of utilizing skipfields for iterative performance, regardless of whether a jump-counting or regular boolean skipfield is used, and regardless of whether the boolean field (for the deque implementations) is stored per-item within the stored type of the std::deque, or separately.</p>

<p>Contact: <img src="footer.gif"><br>
plf:: library and this site Copyright (c) 2016, Matthew Bentley</p>
</body>
</html>
