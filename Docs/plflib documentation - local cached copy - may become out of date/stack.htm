<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">
  <meta name="description" content="PLF C++ Library - plf::stack">
  <meta name="keywords"
  content="C++, C, vector, stack, plf::stack, containers, optimize, performance, pointer, iterator, invalidation, benchmarks, results, benchmark, vs, versus, std::vector, std::deque, deque, std::stack">
  <title>PLF C++ Library - plf::stack</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a>

<h1>PLF C++ Library - plf::stack</h1>
<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#details">Implementation</a></li>
  <li><a href="#license">License</a></li>
  <li><a href="#download">Download</a></li>
  <li><a href="#functions">Function Descriptions and Syntax</a></li>
  <li><a href="#benchmarks">Benchmarks</a></li>
  <li><a href="#faq">Frequently-asked Questions</a></li>
  <li><a href="#version">Version History</a></li>
  <li><a href="#contact">Contact</a></li>
</ul>

<h2><a id="intro"></a>Intro</h2>

<p>plf::stack is a container that gives the programmer the functionality of a
FILO (first-in, last-out) stack. It is a more <a
href="#benchmarks">efficient</a> drop-in replacement for std::stack, and faster
than all std:: containers in the context of a stack. Like plf::colony it never invalidates
references/pointers to non-popped elements, making it at least potentially useful for
programming with containers of inter-related data structures. It supports C++11
move and emplace semantics and operations.</p>


<h2><a id="implementation"></a>Implementation</h2>

<p>plf::stack uses the same <a href="chained_group_allocation_pattern.htm">chained-group memory allocation
pattern</a> as plf::colony ie. it is made up of a linked chain of 'groups', structs containing a memory block and metadata, with a growth factor of 2 for the memory blocks. The metadata within the groups - 'elements' (pointer to the memory block), previous_group (pointer or NULL), next_group (pointer or NULL), and 'end' (pointer to last element in memory block) - aid respectively in the identification of when when a pop reaches the start of the memory block, iterating backwards to the previous group, iterating forwards to the next group, and identifying when a push reaches the capacity of any given memory block.</p>
<p>When capacity of the current memory block is reached, a new group is created and linked to via the next_group pointer. plf::stack does not release memory blocks to the OS when the beginning of a group is reached via pop() and navigation to a previous group completed (this is deferred to the <code>'trim_trailing_groups'</code> function, to be called by the programmer when convenient to the use-case). This avoids a deallocation/reallocation cost which could occur if the stack was pushed/popped repeatedly and group-boundaries crossed repeatedly in the process.</p>

<h2><a id="license"></a>License</h2>

<p>plf::stack is under a permissive <a
href="http://en.wikipedia.org/wiki/Zlib_License">zlib license</a>. This means:
Software is used on 'as-is' basis. It can be modified and used in commercial
software. Authors are not liable for any damages arising from its use. The
distribution of a modified version of the software is subject to the following
restrictions:</p>
<ul>
  <li>The authorship of the original software must not be misrepresented,</li>
  <li>Altered source versions must not be misrepresented as being the original
    software, and</li>
  <li>The license notice must not be removed from source distributions.</li>
</ul>

<h2><a id="download"></a>Download</h2>

<p>Download <a href="plf_stack_11-05-2017.zip">here</a> (9kb zip file) or view the <a href="https://github.com/mattreecebentley/plf_stack">repository</a>.<br>
plf::stack is a simple .h header-only library, to be used with
an #include command.</p>
<p>If you are interested in benchmarking you can also download the <a
href="plf_benchmark_suite_06-05-2017.zip">plf benchmark suite</a> (44kb zip
file), which includes plf::nanotimer.</p>

<h2><a id="functions"></a>Function Descriptions and syntax</h2>

<p>plf::stack meets the requirements of the C++ <a
href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> and <a
href="http://en.cppreference.com/w/cpp/concept/AllocatorAwareContainer">AllocatorAwareContainer</a>
concepts.</p>

<p>For the most part the syntax and semantics of plf::stack functions are the
same as std::stack. However there are a few key differences, such as the
meaning of using a number in the constructor. Formal description is as
follows:</p>
<code>template &lt;class T, class Allocator = std::allocator &lt;T&gt; &gt;
class stack</code>

<p><code><b>T</b></code> - the element type. In general T must meet the
requirements of <a
href="http://en.cppreference.com/w/cpp/concept/Erasable">Erasable</a>, <a
href="http://en.cppreference.com/w/cpp/concept/CopyAssignable">CopyAssignable</a>
and <a href="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</a>.<br>
However, if emplace is utilized to insert elements
into the stack, and no functions which involve copying or moving are utilized, T is only required to meet the requirements of <a href="http://en.cppreference.com/w/cpp/concept/Erasable">Erasable</a>.<br>
If move-insert is utilized instead of emplace, T must also meet the requirements of <a
href="http://en.cppreference.com/w/cpp/concept/MoveConstructible">MoveConstructible</a>
.<br>
<code><b>Allocator</b></code> - an allocator that is used to acquire memory to
store the elements. The type must meet the requirements of <a
href="http://en.cppreference.com/w/cpp/concept/Allocator">Allocator</a>. The
behavior is undefined if <code>Allocator::value_type</code> is not the same as
T.</p>

<h4>Basic example of usage</h4>

<div
style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin: 0; line-height: 125%"><code><span style="color: #557799">#include &lt;iostream&gt;</span>
<span style="color: #557799">#include "plf_stack.h"</span>

<span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">main</span>(<span style="color: #333399; font-weight: bold">int</span> argc, <span style="color: #333399; font-weight: bold">char</span> <span style="color: #333333">**</span>argv)
{
  plf<span style="color: #333333">::</span>stack<span style="color: #333333">&lt;</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">&gt;</span> i_stack;

  <span style="color: #888888">// Insert 100 ints:</span>
  <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; i <span style="color: #333333">!=</span> <span style="color: #0000DD; font-weight: bold">100</span>; <span style="color: #333333">++</span>i)
  {
    i_stack.push(i);
  }

  <span style="color: #888888">// Total the ints:</span>
  <span style="color: #333399; font-weight: bold">int</span> total <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;

  <span style="color: #008800; font-weight: bold">while</span> (<span style="color: #333333">!</span>i_stack.empty())
  {
    total <span style="color: #333333">+=</span> i_stack.top();
    i_stack.pop();
  }

  std<span style="color: #333333">::</span>cout <span style="color: #333333">&lt;&lt;</span> <span style="background-color: #fff0f0">"Total: "</span> <span style="color: #333333">&lt;&lt;</span> total <span style="color: #333333">&lt;&lt;</span> std<span style="color: #333333">::</span>endl;
  std<span style="color: #333333">::</span>cin.get();
  <span style="color: #008800; font-weight: bold">return</span> <span style="color: #0000DD; font-weight: bold">0</span>;
} </code></pre>
</div>

<h4>Member types</h4>

<table border="1">
  <tbody>
    <tr>
      <td><b>Member type</b></td>
      <td><b>Definition</b></td>
    </tr>
    <tr>
      <td><code>value_type</code></td>
      <td><code>T</code></td>
    </tr>
    <tr>
      <td><code>allocator_type</code></td>
      <td><code>Allocator</code></td>
    </tr>
    <tr>
      <td><code>size_type</code></td>
      <td><code>Allocator::size_type (pre-c++11)<br>
        std::allocator_traits&lt;Allocator&gt;::size_type
      (post-c++11)</code></td>
    </tr>
    <tr>
      <td><code>reference</code></td>
      <td><code>Allocator::reference (pre-c++11)<br>
        value_type &amp; (post-c++11)</code></td>
    </tr>
    <tr>
      <td><code>const_reference</code></td>
      <td><code>Allocator::const_reference (pre-c++11)<br>
        const value_type &amp; (post-c++11)</code></td>
    </tr>
    <tr>
      <td><code>pointer</code></td>
      <td><code>Allocator::pointer (pre-c++11)<br>
        value_type &amp; (post-c++11)</code></td>
    </tr>
    <tr>
      <td><code>const_pointer</code></td>
      <td><code>Allocator::const_pointer (pre-c++11)<br>
        std::allocator_traits&lt;Allocator&gt;::const_pointer
        (post-c++11)</code></td>
    </tr>
  </tbody>
</table>

<h3>Constructors</h3>

<table border="1">
  <tbody>
    <tr>
      <td>default</td>
      <td><code>explicit stack(const allocator_type &amp;alloc =
        allocator_type())<br>
        explicit stack(const size_type min_group_size, const size_type
        max_group_size = std::numeric_limits&lt;size_type&gt;::max() / 2, const
        allocator_type &amp;alloc = allocator_type()) </code></td>
    </tr>
    <tr>
      <td>copy</td>
      <td><code>stack(const stack &amp;source)</code></td>
    </tr>
    <tr>
      <td>move</td>
      <td><code>stack(const stack &amp;&amp;source) noexcept <font
        size="2">(C++11 and upwards)</font></code></td>
    </tr>
  </tbody>
</table>

<h4>Constructor usage examples</h4>
<ul>
  <li><code>stack&lt;T&gt; a_stack</code>
    <p>Default constructor - default minimum group size is 8, default maximum
    group size is <code>std::numeric_limits&lt;size_type&gt;::max() / 2</code>.
    The reason for this maximum limitation is that each new group doubles the
    number of existing elements in the stack. And since the maximum number of
    elements that can be possibly held in a stack is
    std::numeric_limits&lt;size_type&gt;::max(), the maximum group size must be
    half that.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack;</code><br>
    </p>
  </li>
  <li><code>stack&lt;T, custom_allocator&lt;T&gt; &gt; a_stack</code> 
    <p>Using a custom allocator.<br>
    Example: <code style="color: brown">plf::stack&lt;int,
    tbb::allocator&lt;int&gt; &gt; int_stack;</code><br>
    Example2:<br>
    <code style="color: brown">// Using an instance of an allocator as well as
    it's type<br>
    tbb::allocator&lt;int&gt; alloc_instance;<br>
    plf::stack&lt;int, tbb::allocator&lt;int&gt; &gt;
    int_stack(alloc_instance);</code> </p>
  </li>
  <li><code>stack&lt;T&gt; a_stack(const size_type min_group_size)</code>
    <p>This sets the minimum group size - for example, to 50 (unlike a vector,
    these 50 elements are not constructed at this point). This may yield a
    minor performance advantage if you know roughly how many elements are going
    to be stored in your stack in advance. Minimum group size may not be lower
    than 3.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack(62);</code></p>
  </li>
  <li><code>stack&lt;T&gt; a_stack(const size_type min_group_size, const
    size_type max_group_size)</code>
    <p>This sets the minimum group size as above, as well as the maximum group
    size - this can be useful if you want to limit memory usage. Minimum group
    size may not be lower than 3. Maximum group size may not be larger than
    <code>std::numeric_limits&lt;size_type&gt;::max() / 2</code>.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt; int_stack(64,
    512);</code></p>
  </li>
  <li><code>stack&lt;T&gt; a_stack(const stack &amp;source)</code> 
    <p>Copies all contents from source. New minimum group size is the total
    size of <code>source</code>, unless <code>source</code>'s minimum group
    size is larger than it's total size, in which case the new minimum group
    size is the source's minimum group size. If source's total size is larger
    than it's maximum group size, the new minimum group size is the same as the
    source's maximum group size.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack_2(int_stack_1);</code></p>
  </li>
  <li><code>stack&lt;T&gt; a_stack(stack &amp;&amp; source) <b>C++11 and
    upwards</b></code>
    <p>Moves all contents from source, does not alter any group sizes. Source
    is now void of contents and can be safely destructed. <br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack_2(std::move(int_stack_1));</code></p>
  </li>
</ul>

<h3>Member functions</h3>
<ul>
  <li><code>void push(const the_type &amp;element)</code> 
    <p>Push an element to the stack.<br>
    Example: <code style="color: brown">object_stack.push(object1);</code></p>
  </li>
  <li><code>void push(the_type &amp;&amp;element) <b>C++11 and
    upwards</b></code> 
    <p>Move an element to the stack.<br>
    Example: <code
    style="color: brown">object_stack.push(std::move(object1));</code></p>
  </li>
  <li><code>void emplace(Arguments ...parameters) <b>C++11 and
    upwards</b></code> 
    <p>Constructs an element directly on the stack using the the constructor
    arguments specified.<br>
    Example: <code style="color: brown">object_stack.emplace(10, 200,
    "a");</code></p>
  </li>
  <li><code>void pop()</code>
    <p>Pop the last push()'d element off the stack. In debug mode will test for
    stack emptiness prior to operation via an assert. Calling pop() on an empty
    stack in non-debug mode results in undefined behaviour.<br>
    Example: <code style="color: brown">object_stack.pop();</code></p>
  </li>
  <li><code>the_type &amp; top()</code> 
    <p>Return a reference to the last push()'d element on the stack. In debug
    mode will test for stack emptiness prior to operation via an assert.
    Calling top() on an empty stack in non-debug mode results in undefined
    behaviour.<br>
    Example: <code style="color: brown">object2 = object_stack.top();</code></p>
  </li>
  <li><code>size_type size()</code> 
    <p>Return the current number of elements stored on the stack.<br>
    Example: <code style="color: brown">unsigned int j =
    static_cast&lt;unsigned int&gt;(object_stack.size());</code></p>
  </li>
  <li><code>size_type max_size()</code> 
    <p>Returns the maximum number of elements that the allocator can store in
    the container. This is an approximation as it does attempt to measure the
    memory overhead of the container's internal memory structures. It is not
    possible to measure the latter because a copy operation may change the
    number of groups utilized for the same amount of elements, if the maximum
    or minimum group sizes are different in the source container.<br>
    Example: <code style="color: brown">std::cout &lt;&lt; i_stack.max_size()
    &lt;&lt; std::endl;</code></p>
  </li>
  <li><code>size_type capacity()</code> 
    <p>Returns total number of elements currently able to be stored in
    container without expansion.<br>
    Example: <code style="color: brown">std::cout &lt;&lt; i_stack.capacity()
    &lt;&lt; std::endl;</code></p>
  </li>
  <li><code>void reserve(size_type reserve_amount)</code> 
    <p>Preallocates memory space sufficient to store the number of elements
    indicated by <code>reserve_amount</code>. Will not change minimum and
    maximum group sizes. The reserve_amount is limited to the maximum group
    size of the stack and will be truncated if necessary. By default the
    maximum group size is the maximum number allowed by
    <code>size_type</code>.<br>
    Example: <code style="color: brown">i_stack.reserve(15);</code></p>
  </li>
  <li><code>void shrink_to_fit()</code> 
    <p>Reduces container capacity to the amount necessary to store all
    currently stored elements. If the total number of elements is larger than
    the maximum group size, the resultant capacity will be equal to
    <code>((total_elements / max_group_size) + 1) * max_group_size</code>.
    Invalidates all pointers, iterators and references to elements within the
    container.<br>
    Example: <code style="color: brown">i_stack.shrink_to_fit();</code></p>
  </li>
  <li><code>void trim_trailing_groups()</code>
    <p>Removes any trailing groups within the container substructure, which may
    be present in the scenario of many pushes followed by many pops. Unlike a
    regular shrink_to_fit, does not shrink capacity to the size needed to
    contain the currently-stored elements, simply frees up unused groups.
    Runtime cost is significantly lower than shrink_to_fit, but may not free as
    much memory.<br>
    Example: <code style="color: brown">i_stack.shrink_to_fit();</code></p>
  </li>
  <li><code>bool empty()</code> 
    <p>Returns a boolean indicating whether the stack is currently empty of
    elements.<br>
    Example: <code style="color: brown">if (object_stack.empty())
    return;</code></p>
  </li>
  <li><code>void clear()</code>
    <p>Empties the stack and removes all elements and groups.<br>
    Example: <code style="color: brown">object_stack.clear();</code></p>
  </li>
  <li><code>void change_group_sizes(const unsigned short min_group_size, const
    unsigned short max_group_size)</code>
    <p>Changes the minimum and maximum internal group sizes, in terms of number
    of elements stored per group. If the stack is not empty and either min_group_size is larger than the smallest group in the stack, or max_group_size is smaller than the largest group in the stack, the stack will be internally copy-constructed into a new stack which uses the new group sizes, invalidating all pointers/iterators/references.<br>
    Example: <code style="color: brown">object_stack.change_group_sizes(1000,
    10000);</code></p>
  </li>
  <li><code>void change_minimum_group_size(const unsigned short
    min_group_size)</code>
    <p>Changes the minimum internal group size only, in terms of minimum number
    of elements stored per group. If the stack is not empty and min_group_size is larger than the smallest group in the stack, the stack will be internally copy-constructed into a new stack which uses the new minimum group size, invalidating all pointers/iterators/references.<br>
    Example: <code
    style="color: brown">object_stack.change_minimum_group_size(100);</code></p>
  </li>
  <li><code>void change_maximum_group_size(const unsigned short
    min_group_size)</code>
    <p>Changes the maximum internal group size only, in terms of maximum number
    of elements stored per group. If the stack is not empty and either max_group_size is smaller than the largest group in the stack, the stack will be internally copy-constructed into a new stack which uses the new maximum group size, invalidating all pointers/iterators/references.<br>
    Example: <code
    style="color: brown">object_stack.change_maximum_group_size(1000);</code></p>
  </li>
  <li><code>void swap(stack &amp;source)</code>
    <p>Swaps the stack's contents with that of <code>source</code>.<br>
    Example: <code
    style="color: brown">object_stack.swap(other_stack);</code></p>
  </li>
  <li><code>friend void swap(stack &amp;A, stack &amp;B)</code>
    <p>External friend function, swaps the stack A's contents with that of
    stack B (assumes both stacks have same element type).<br>
    Example: <code style="color: brown">swap(object_stack,
    other_stack);</code></p>
  </li>
  <li><code>stack &amp; operator = (const stack &amp;source)</code> 
    <p>Copy the elements from source stack to this stack, clearing this stack
    of existing elements first.<br>
    Example: <code style="color: brown">object_stack = object_stack2;</code></p>
  </li>
  <li><code>stack &amp; operator = (const stack &amp;&amp;source) <b>C++11 and
    upwards</b></code> 
    <p>Move the elements from source stack to this stack, clearing this stack
    of existing elements first. Source stack becomes invalid but can be safely
    destructed without undefined behaviour.<br>
    Example: <code style="color: brown">object_stack =
    std::move(object_stack2);</code></p>
  </li>
  <li><code>bool operator == (const stack &amp;source)</code> 
    <p>Compare contents of another stack to this stack. Returns a boolean to
    indicate whether they are equal.<br>
    Example: <code style="color: brown">if (object_stack == object_stack2)
    return;</code></p>
  </li>
  <li><code>bool operator != (const stack &amp;source)</code> 
    <p>Compare contents of another stack to this stack. Returns a boolean to
    indicate whether they are not equal.<br>
    Example: <code style="color: brown">if (object_stack != object_stack2)
    return;</code></p>
  </li>
  <li><code>allocator_type get_allocator()</code> 
    <p>Returns a copy of the allocator used by this stack</p>
  </li>
</ul>

<h2><a id="benchmarks"></a>Benchmarks</h2>

<p style="font-size: 75%"><i>Last updated 17-11-2016 v1.04</i></p>

<p>The test setup is an E8500 (Core2Duo) on an Intel motherboard, 8GB ram, running GCC 5.1
x64 as compiler. Build settings are
"-O2;-march=native;-std=c++11;-fomit-frame-pointer". Results for Microsoft
Visual Studio 2015 Update 3 under a Haswell core CPU can be found <a href="stack_benchmark_msvc_results.htm">here</a>.
Tests are based on a sliding scale of number of runs vs number of elements, so
a test with only 10 elements in a container may average 100000 runs, whereas a
test with 100000 elements may only average 10 runs. This tends to give adequate
results without overly lengthening test times.</p>

<p>Tests are carried out on the following types: (a) a 8-bit type ie. char, (b)
a 32-bit type ie. int, (c) a 64-bit type ie. double, (d) a small struct
containing two pointers and four scalar types, and (e) a large struct
containing 2 pointers, 4 scalar types, a large array of ints and a small array
of chars. In order to better facilitate accurate time-keeping for short tests,
both container construction and destruction times are included in the tests.
The sequence is as follows: construction, push N elements, read (back) + pop
all elements, destruction. Because unlike a regular container, a stack must be
pushed for every pop, and popped for every read, it most sense to combine these two timings and compare on that basis, as what is most important is the
overall time taken. For that reason both separate and combined ("total
time") benchmarks are presented below.</p>

<h2>Construction + Push</h2>
                                                                       
<p><i>Click images or hover over to see results at linear scale instead</i></p>
<img alt="test result graph" 
onmouseover="this.src='tests/gcc/stack/char_push.png';"
onmouseout="this.src='tests/gcc/stack/char_push_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/char_push.png';"
src="tests/gcc/stack/char_push_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/int_push.png';"
onmouseout="this.src='tests/gcc/stack/int_push_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/int_push.png';"
src="tests/gcc/stack/int_push_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/double_push.png';"
onmouseout="this.src='tests/gcc/stack/double_push_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/double_push.png';"
src="tests/gcc/stack/double_push_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/small_struct_push.png';"
onmouseout="this.src='tests/gcc/stack/small_struct_push_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/small_struct_push.png';"
src="tests/gcc/stack/small_struct_push_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/large_struct_push.png';"
onmouseout="this.src='tests/gcc/stack/large_struct_push_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/large_struct_push.png';"
src="tests/gcc/stack/large_struct_push_log.png"><br>


<h2>Back + Pop + Destruction</h2>

<p><i>Click images or hover over to see results at linear scale instead</i></p>
<img alt="test result graph" 
onmouseover="this.src='tests/gcc/stack/char_pop.png';"
onmouseout="this.src='tests/gcc/stack/char_pop_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/char_pop.png';"
src="tests/gcc/stack/char_pop_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/int_pop.png';"
onmouseout="this.src='tests/gcc/stack/int_pop_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/int_pop.png';"
src="tests/gcc/stack/int_pop_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/double_pop.png';"
onmouseout="this.src='tests/gcc/stack/double_pop_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/double_pop.png';"
src="tests/gcc/stack/double_pop_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/small_struct_pop.png';"
onmouseout="this.src='tests/gcc/stack/small_struct_pop_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/small_struct_pop.png';"
src="tests/gcc/stack/small_struct_pop_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/large_struct_pop.png';"
onmouseout="this.src='tests/gcc/stack/large_struct_pop_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/large_struct_pop.png';"
src="tests/gcc/stack/large_struct_pop_log.png"><br>


<h2>Total Time</h2>

<p><i>Click images or hover over to see results at linear scale instead</i></p>
<img alt="test result graph" 
onmouseover="this.src='tests/gcc/stack/char_total_time.png';"
onmouseout="this.src='tests/gcc/stack/char_total_time_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/char_total_time.png';"
src="tests/gcc/stack/char_total_time_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/int_total_time.png';"
onmouseout="this.src='tests/gcc/stack/int_total_time_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/int_total_time.png';"
src="tests/gcc/stack/int_total_time_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/double_total_time.png';"
onmouseout="this.src='tests/gcc/stack/double_total_time_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/double_total_time.png';"
src="tests/gcc/stack/double_total_time_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/small_struct_total_time.png';"
onmouseout="this.src='tests/gcc/stack/small_struct_total_time_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/small_struct_total_time.png';"
src="tests/gcc/stack/small_struct_total_time_log.png"><br>
<img alt="test result graph"
onmouseover="this.src='tests/gcc/stack/large_struct_total_time.png';"
onmouseout="this.src='tests/gcc/stack/large_struct_total_time_log.png';"
style="cursor: pointer;"
onclick="this.src='tests/gcc/stack/large_struct_total_time.png';"
src="tests/gcc/stack/large_struct_total_time_log.png"><br>


<h4>Conclusion</h4>

<p>Simply put, plf::stack out-performs both std::stack (std::deque) and
std::vector once you take into account both push and pop time, and we can see that the larger the stored type is, the greater the
performance advantage is.</p>

<h2><a id="version"></a>Version history</h2>
<ul>
  <li>2017-05-11: v1.08 - Minor corrections to default constructors, copy constructors and reserve. Emplace availability correction for some compilers. Minor optimization to C++03 swap. Other minor code improvements.</li>
  <li>2017-05-06: v1.07 - Minor correction to noexcept statuses. Correction to test suite under C++03.</li>
  <li>2017-03-28: v1.06 - Correction to emplace. Addition of allocator-extended move and copy constructors. Some standards
    compliance updates and corrections to noexcept statuses. Addition of get_allocator(). swap(stack &amp;A, stack &amp;B) is now non-member and non-friend.</li>
  <li>2016-11-17: v1.05 - Improvement in performance for smaller numbers of scalar types.</li>
  <li>2016-11-13: v1.04 - Minor update.</li>
  <li>2016-10-15: v1.03 - Removed potential memory leak in clear, move and destructor.</li>
  <li>2016-10-14: v1.02 - Corrections to move assignment operator, trim_trailing_groups, emplace, change_group_sizes and test_suite.</li>
  <li>2016-10-10: v1.01 - change_group_size functions no longer copy-construct groups into a new stack unless the stack is not empty and either min_group_size is larger than the smallest group in the stack, or max_group_size is smaller than the largest group in the stack. All change_group_size functions now trim trailing groups. Emplace changed to no longer require move semantics, which enables the use of non-move-constructible/non-copy-constructible types with stack (example: anything containing a std::mutex).</li>
  <li>2016-10-03: v1.00 - Separated from colony package, friendship removed. See colony history prior to v3.71 for earlier version changes.</li>
</ul>

<p><a id="contact"></a>Contact: <img alt="footer" src="footer.gif"><br>
plf:: library and this page Copyright (c) 2017, Matthew Bentley</p>
</body>
</html>
