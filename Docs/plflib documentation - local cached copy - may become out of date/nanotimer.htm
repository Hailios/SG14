<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">
  <meta name="description" content="PLF C++ Library - plf::nanotimer">
  <meta name="keywords"
  content="C++, C, vector, plf::nanotimer, benchmarks, benchmarking, microsecond, nanosecond, millisecond, delay, counter, timer, precision">
  <title>PLF C++ Library - plf::nanotimer</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a>

<h1>PLF C++ Library - plf::nanotimer</h1>
<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#details">Implementation</a></li>
  <li><a href="#license">License</a></li>
  <li><a href="#download">Download</a></li>
  <li><a href="#functions">Function Descriptions and Syntax</a></li>
  <li><a href="#version">Version History</a></li>
  <li><a href="#contact">Contact</a></li>
</ul>

<h2><a id="intro"></a>Intro</h2>

<p>plf::nanotimer is a simple C++03/11/etc timer class for ~microsecond-precision cross-platform benchmarking. As a result the implementation is as limited and simple as possible to create the lowest amount of overhead. It was primarily constructed because cross-compiler support for sub-timeslice timer readings using std::chrono was lacking, and boost::chrono does not give sub-timeslice readings on all versions of windows. Also included in the header are some additional 'delay' functions.</p>


<h2><a id="implementation"></a>Implementation</h2>

<p>plf::nanotimer uses QPC under Windows (see <a href="http://computerperformancebydesign.com/high-resolution-clocks-and-timers-for-performance-measurement-in-windows/">this post</a> for it's resolution and quirks), clock_get_time under Mac OSX, and clock_gettime (with CLOCK_MONOTONIC) under Linux/BSD. Windows XP is supported but see the article above for it's failings under that platform. The timer does not in fact 'count' the time - it takes a measurement when the timer is started, then again when a function to measure the elapsed time has passed. The timer can be 'paused/unpaused' by taking a reading of the current elapsed time when you want to pause, then calling 'start' again when it's time to unpause (this resets the timer). At the next reading of elapsed time, simply add to the previous reading.</p>

<h2><a id="license"></a>License</h2>

<p>plf::nanotimer is under a permissive <a
href="http://en.wikipedia.org/wiki/Zlib_License">zlib license</a>. This means:
Software is used on 'as-is' basis. It can be modified and used in commercial
software. Authors are not liable for any damages arising from its use. The
distribution of a modified version of the software is subject to the following
restrictions:</p>
<ul>
  <li>The authorship of the original software must not be misrepresented,</li>
  <li>Altered source versions must not be misrepresented as being the original
    software, and</li>
  <li>The license notice must not be removed from source distributions.</li>
</ul>

<h2><a id="download"></a>Download</h2>

<p>Download <a href="plf_nanotimer_03-10-2016.zip">here</a> (3kb zip file) or view the <a href="https://github.com/mattreecebentley/plf_nanotimer">repository</a>.<br>
plf::nanotimer is a simple .h header-only library, to be used with
an #include command.</p>

<h2><a id="functions"></a>Function Descriptions and syntax</h2>

<h4>Constructor</h4>
<ul>
  <li><code>nanotimer()</code>
    <p>Default constructor - no arguments.<br>
    Example: <code style="color: brown">plf::nanotimer timer;</code><br>
    </p>
  </li>
</ul>

<h4>Member functions</h4>
<ul>
  <li><code>void start()</code>
    <p>Start or restart timer.<br>
    Example: <code style="color: brown">
	timer.start();<br>
	// Do something here<br>
	double results = timer.get_elapsed_ns();<br>
	std::cout << "Timing: " << results << " nanoseconds." << std::endl;<br>
	timer.start(); // restart time<br>
	// Do something here<br>
	// etcetera
	 </code><br>
    </p>
  </li>

  <li><code>double timer.get_elapsed_ns()</code>
    <p>Get elapsed time in nanoseconds.<br>
    Example: <code style="color: brown">
	timer.start()
	// Do something here
	double results = timer.get_elapsed_ns();
	std::cout << "Timing: " << results << " nanoseconds." << std::endl;
	 </code><br>
    </p>
  </li>

  <li><code>double timer.get_elapsed_us()</code>
    <p>Get elapsed time in microseconds.<br>
    Example: <code style="color: brown">
	timer.start()
	// Do something here
	double results = timer.get_elapsed_us();
	std::cout << "Timing: " << results << " microseconds." << std::endl;
	 </code><br>
    </p>
  </li>

  <li><code>double timer.get_elapsed_ms()</code>
    <p>Get elapsed time in milliseconds.<br>
    Example: <code style="color: brown">
	timer.start()
	// Do something here
	double results = timer.get_elapsed_ms();
	std::cout << "Timing: " << results << " milliseconds." << std::endl;
	 </code><br>
    </p>
  </li>
</ul>

<h4>Non-member functions which utilize plf::nanotimer</h4>
<ul>
  <li><code>void plf::nanosecond_delay(double x)</code>
    <p>Delay until 'x' number of nanoseconds have passed. This is a polling loop with no freeing of timeslices to the OS.<br>
    Example: <code style="color: brown">
	// Pause program:<br>
	plf::nanosecond_delay(1040000);
	 </code><br>
    </p>
  </li>

  <li><code>void plf::microsecond_delay(double x)</code>
    <p>Delay until 'x' number of microseconds have passed. This is a polling loop with no freeing of timeslices to the OS.<br>
    Example: <code style="color: brown">
	// Pause program:<br>
	plf::microsecond_delay(10400);
	 </code><br>
    </p>
  </li>

  <li><code>void plf::millisecond_delay(double x)</code>
    <p>Delay until 'x' number of milliseconds have passed. This is a polling loop with no freeing of timeslices to the OS.<br>
    Example: <code style="color: brown">
	// Pause program:<br>
	plf::millisecond_delay(104);
	 </code><br>
    </p>
  </li>

</ul>


<h2><a id="version"></a>Version history</h2>
<ul>
  <li>2016-10-03: v1.00 - First separate release.</li>
</ul>

<p><a id="contact"></a>Contact: <img alt="footer" src="footer.gif"><br>
plf:: library and this page Copyright (c) 2016, Matthew Bentley</p>
</body>
</html>
