<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="description" content="PLF C++ Library">
  <meta name="keywords"
  content="C++, C, PLF, colony, stack, STL, containers, optimize, performance, pointer, iterator, jump-counting, boolean, field">
  <title>PLF C++ Library - plf::colony</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a>

<h1>plf::colony - a container for game dev and other highly modular programming environments</h1>
<p>By Matthew Bentley 15/02/2016</p>

<h2>Abstract</h2>

<p>Colony is a template-based C++ data container designed for unordered-but-sortable storage in highly modular and interconnected environments such as game development. With an emphasis on high performance for larger-than-scalar types, it never invalidates pointers/iterators to non-erased elements, regardless of insertion or erasures. Utilising the advanced jump-counting skipfield pattern, the size-doubling memory-block allocation model and a custom stack (plf::stack) it outperforms all other extensible data containers in any scenario where pointers/iterators to container elements must remain stable.</p>


<h2>Introduction</h2>

<p>In many areas of computer science, particularly game development, we have situations where interconnected data sets are being added to or erased from on-the-fly, but maintaining functional links between elements in these sets is critical. Unfortunately the existing Standard Template Library data containers do not cater well to this scenario. The closest matches are std::map, std::set, or a std::vector of pointers to dynamically-allocated objects, however, none of these have adequate performance due to having non-coalesced memory locations for their data elements, which results in cache misses and low performance. On modern CPU's roughly 100 calculations can be performed on data in the CPU cache in the same time it takes to fetch one integer from main memory, which means having coalesced memory storage so many items can be read into the cache at once is critical to any game or other application hoping to achieve even reasonable performance statistics. This scenario is not going to change, but only get worse: the gap between main memory and CPU speeds has been increasing since the dawn of the computer era (see below).</p>

<p>Various workarounds have been found in the field of game design, namely vectors of pointers to vectors of data (erasing the pointers but not the data, in order to maintain on-the-fly performance and data stability), having boolean flags on objects to indicate inactivity instead of erasing them, and various other solutions which don't maintain pointer stability but at least don't affect performance so heavily as vector erasure does. As noted, std::vector has poor erasure performance due to the need to reallocate all data after the point of erasure. Of all these options the better-performing one is maintainance of boolean flags on objects to indicate inactivity or 'erasure', but unfortunately this scenario presents many difficulties: (a) memory is never released to the OS or reused, (b) containers cannot be added to during run-time as this will reallocate data (they are filled completely at the start of a game section then released at the end of that section - there is no flexibility), and (c) iteration performance is inadequate in the scenario where there are many consecutive erased elements, compared to a regular std::vector where actual erasure occurs.</p>

<p>Colony mitigates all these failings while maintaining pointer/iterator stability. It's one downside is that it is unordered, though data can be sorted - this is not a concern for the games industry in general, as the vast bulk of game processing involves iterating over data, performing transforms where order is not important. It may be a concern for other areas of computer science. Performance is best for larger-than-scalar types such as structs and classes, and the performances gains over other data containers tend to increase corresponding to the size of the element stored. Scalar-type (float, int etc) performance is still better than other containers when pointer/iterator stability is required, however it will lose out to std::vector in terms of iteration performance in raw tests where stability of pointers/iterators to container elements is not a factor. Even in this scenario however, the gain in erasure performance over std::vector may make up for this, depending on the situation.</p>

<h2>Implementation</h2>

<h3>Groups</h3>

<p>A colony is primarily a doubly-linked chain of objects called 'group's, which contain (a) memory blocks containing the container elements (b) an advanced jump-counting skipfield corresponding to each of these elements and (c) metadata such as the number of elements and the next/previous group in the chain. The chain utilises the size-doubling memory-block allocation model, meaning that each group in the chain doubles the number of elements that can be stored in the colony. This model means no element reallocation need take place and hence no pointer/iterator invalidation is possible upon insertion. The jump-counting skipfield notates elements which are erased and destructed, so that they can be skipped over during iteration efficiently, meaning elements after the erasure point need not be reallocated and also do not cause pointer/iterator invalidation (except for pointers/iterators to the erased elements themselves, of course). For more information see the jump-counting Skipfield Pattern.</p>

<p>For performance reasons the skipfield in this case is comprised of unsigned short integers ie. 16-bit, or larger on platforms which do not support 16-bit integers. This limits the number of elements which can be potentially stored in a group to a maximum of 65535, however performance-testing has shown this to not be a problem. Maximum and minimum group sizes can also be set manually during construction, and this may lead to performance gains where the programmer knows the exact size of their elements and is thus able to 'stream' data to the CPU in chunks, in order to optimize cache performance. By default however the starting group size is 8 elements, and each subsequent group doubles the overall size of the colony until the maximum group size of 65535 is reached. When a group is entirely empty, in other words, when every single element in the group has been erased, the group will be destructed, it's memory released to the OS, and the chain closed between the previous and subsequent groups. This is how a colony releases unused memory. In terms of reusing unused memory, it utilises a custom stack as is described below.</p>

<h3>plf::stack and element memory reuse</h3>
<p>In addition to the chain of groups described above a colony also utilises a custom stack called plf::stack, which is based upon the same size-doubling group system as colony but has no maximum size limit for groups other than the maximum number capable of being stored by the supplied or default allocator's <i>size_type</i>. It has better performance than std::vector or other STL containers, in the context of a stack. When an element is erased in colony it is, as mentioned, notated in the jump-counting skipfield, but also recorded in this stack for use upon subsequent insertions. The next time an element is inserted, colony will check the stack to see if it has any stored locations. If so, it will reuse one of those locations and notate the reinsertion back into the jump-counting skipfield. If not, it will insertion to the end of the colony ie. the current position in the last group in the chain.</p>

<h3>Jump-counting skipfield, Groups and Iteration</h3>
<p>The skipfield itself is reasonably complex and described elsewhere, we will not enter into such discussion here except to note the effect that multiple memory blocks has on iterating over a jump-counting skipfield. In the case of iterating over an ordinary, singular-memory-block data container, we could simply do the skipfield calculation (<code>element_pointer += 1 + *(++skipfield_pointer); skipfield_pointer += *skipfield_pointer;</code>) and reach the next non-erased element. Having groups makes this slightly more complicated. Each group's skipfield is self-contained and if the skipfield skips to the location one-past-the-end of the element memory-block, this indicates that we have skipped over the last element in the group and onto the next group's first element. In the case that the first element in the next group is also erased as indicated in the skipfield, one more skipfield calculation will be necessary at this point to reach our final destination, however this is an uncommon scenario, so the amortised time-complexity for singular iterations is O(1).</p>

<p>Because we remove groups from the chain which have become completely empty due to erasure, there is no chance whatsoever of encountering more than two skipfield calculations for a singular iteration - once you've skipped to the next group, there is at maximum one more skipfield calculation. And because each group's skipfield is self-contained, removing any group from the chain does not cause any changes to any subsequent or prior group's skipfields. However, the plf::stack of reusable locations as described above must be updated to remove any entries pointing to element locations within the removed group - this is fast and does not affect performance significantly, particularly since the number of element locations able to be housed in the groups is limited in size.</p>

<h3>Iterators and multi-increment/decrement scenarios</h3>
<p><code>iterator, const_iterator, reverse_iterator</code> and <code>const_reverse_iterator</code> are all provided and follow the typical std:: syntax and semantics. Colony provides the usual <code>end(), begin(), rend()</code> etc functions. Each iterator stores (a) a pointer to the element location itself (b) a pointer to the group containing the element and (c) a pointer to the skipfield node corresponding to that element. All iterators are of bidirectional type but additionally provide &gt;, &lt;, &gt;= and &lt;= operators, as these are also O(1) and useful in some looping patterns. There are also <code>advance(), next(), prev()</code> and <code>distance()</code> functions within colony whose time-complexity varies depending on the distances required, the group sizes at the starting points of iteration and whether there are any erased elements in the groups. These four functions approximate O(log N) on average, but are almost always better than O(N) and are sometimes O(1) depending on context. The reasons for this are (a) that intermediate groups can be skipped entirely if their size is smaller than the remaining distance to be transversed, and (b) if there are no erased elements in the start or end group of the transversal, then simple addition or subtraction may be used to calculate the ending position, rather than consulting the skipfields.</p>


<h2>Performance results</h2>

<p>The test setup is an E8500 on an Intel motherboard, 8GB ram. Results are
much the same on other Intel x64 platforms. Compilers are mingw TDM GCC 5.1
(both 32-bit and 64-bit versions), MS Visual C++ 2010 and MS Visual C++ 2013. I've forgone
clang as the results were much the same as GCC. Release compilation settings
only, settings for MS compilers are "/O2 /Oi /Ot /Oy /GL /GS- /GY- /arch:SSE2 /MT", for GCC they are "-O2;-march=native;-std=c++11". <a href="http://www.libsdl.org">SDL</a> was used for more precise timing.</p>

<h3>Real world testing</h3>

<p>Rather than the standard raw-performance tests, I initially present comparative performance tests under the scenario where pointer/iterator stability and non-invalidation is required regardless of insertions or erasures, as that is the focal area of colony. In this scenario I compared against std::vector, std::deque, std::map, std::set, and a raw C-style array for reference. Only std::vector and std::deque required alterations to meet the requirement of pointer/iterator stability, so within the first test these are containers of pointers to dynamically-allocated objects, rather than containers of elements, as this is the only way to ensure pointer/iterator stability regardless of insertion/erasure.</p>

<p>The second test compares the two most common solutions in game development to the erasure pointer/iterator invalidation problem when using std::vector. The first solution is to use a boolean flag for each element to indicate erasure instead of actually erasing, as has been described previously in this document. The second is to have a second std::vector of pointers to the initial std::vector of elements, and to only erase the pointers, not the elements, iterating over the pointer vector to process the elements. Neither of these solve the problems of pointer invalidation upon insertion into the vector, or the fact that erased element memory is never freed to the OS or reused. As a reference point I've also included a C-style array using a boolean field. In this test we will compare the effects of random erasures on performance.</p>

<p>This third test compares the same four containers above, this time testing the worst-case scenario of large numbers of consecutive erasures.</p>

<h3>Raw speed testing</h3>

<p>Now we move on to the raw performance tests. First we compare raw performance versus array and std::vector, with large structs.</p>

<p>Now we compare raw performance versus array and std::vector, with small structs.</p>

<p>Now we compare raw performance versus array and std::vector, with a scalar type (unsigned int).</p>

<p>As you can see, the results for small scalar types are not as impressive as the small and large struct tests. However, we still save far more time during erasure than we lose during iteration.</p>



<h2>Summary</h2>
<p>From the tests above it is plain to see that colony outperforms all other data containers in the area to which it is applicable (zero pointer/iterator invalidation via insertion and erasure, ensuring working conditions for highly modular and interconnected data). In addition it allows for the easy reclamation and reuse of unused memory space. plf::colony is open-source, free and under a permissive zlib license. It can be downloaded from plflib.org.</p>


<p>Contact: <img src="footer.gif"><br>
plf:: library and this site Copyright (c) 2016, Matthew Bentley</p>

</body>
</html>